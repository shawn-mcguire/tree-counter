# -*- coding: utf-8 -*-
"""
Created on Thu Jun 13 10:21:36 2019
@author: smcguire

This code trains a cnn on the cropped images generated by counter_cnn_1 and outputs the model to 
'model.h5' in root directory

"""

from keras.preprocessing.image import ImageDataGenerator, array_to_img, img_to_array, load_img
from keras.models import Sequential
from keras.layers import Conv2D, MaxPooling2D
from keras.layers import Activation, Dropout, Flatten, Dense

import PIL

# look into rotation and width change settings (weird preview images)
datagen = ImageDataGenerator(
#        rotation_range=20,
#        width_shift_range=.2,
#        height_shift_range=.2,
        rescale=1./255,
        vertical_flip=True,
        horizontal_flip=True,
        fill_mode='nearest')

## preview an image
## the .flow() command below generates batches of randomly transformed images
## and saves the results to the `preview/` directory
#img = load_img('./TreeCount/train/high/-1.27,10.8876, TreeCount=11.png') #this is a PIL image
#x = img_to_array(img)  # this is a Numpy array with shape (3,150,150)
#x = x.reshape((1,) + x.shape)  # this is a Numpy array with shape (1,3,150,150)
#i = 0
#for batch in datagen.flow(x, batch_size=1, 
#                          save_to_dir='./preview', save_prefix='tree', save_format='jpeg'):
#    i += 1
#    if i > 20:
#        break

model = Sequential()
model.add(Conv2D(32, (3, 3), input_shape=(24, 24,3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Conv2D(32, (3, 3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Conv2D(64, (3, 3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))

# the model so far outputs 3D feature maps (height, width, features)

model.add(Flatten())  # this converts our 3D feature maps to 1D feature vectors
model.add(Dense(64))
model.add(Activation('relu'))
model.add(Dropout(0.5))
model.add(Dense(1))
model.add(Activation('sigmoid'))

model.compile(loss='binary_crossentropy',
              optimizer='rmsprop',
              metrics=['accuracy'])

batch_size = 16

# augmentation configuration for training
train_datagen = ImageDataGenerator(
        rescale=1./255,
        shear_range=0.2,
        zoom_range=0.2,
        horizontal_flip=True)

# rescale test data
validation_datagen = ImageDataGenerator(rescale=1./255)

train_generator = train_datagen.flow_from_directory(
        './train',
        target_size = (24,24), # images resized to 195 x 195
        batch_size = batch_size,
        class_mode = 'binary') # binary labels since using binary_crossentropy loss

validation_generator = validation_datagen.flow_from_directory(
        './validate',
        target_size = (24,24),
        batch_size = batch_size,
        class_mode='binary')
# change epochs back to 50!
model.fit_generator(
        train_generator,
        steps_per_epoch=2000 // batch_size,
        epochs=25,
        validation_data=validation_generator,
        validation_steps=800 // batch_size)

model.save('model.h5')

#import numpy as np
#validation_generator.reset()
#pred = model.predict_generator(validation_generator)
#true_labels = validation_generator.classes
#predicted_class_indices = np.argmax(pred,axis=1)







